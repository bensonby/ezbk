<%= form_for(@transaction) do |f| %>
  <% if @transaction.errors.any? %>
    <div id="error_explanation">
      <h2><%= pluralize(@transaction.errors.count, "error") %> prohibited this transaction from being saved:</h2>

      <ul>
      <% @transaction.errors.full_messages.each do |msg| %>
        <li><%= msg %></li>
      <% end %>
      </ul>
    </div>
  <% end %>

  <div class="field">
    <%= f.label :transaction_date %><br />
    <%= f.text_field :transaction_date, :tabindex => autotab, :class => 'date' %>
  </div>
  <div class="field">
    <%= f.label :description %><br />
    <%= f.text_field :description, :tabindex => autotab %>
    <span id='hint-container' style='display: none;'>
      <span id='hint'></span>
      <a href='#' onclick='toggleHintDetails()'>Details</a>
    </span>
  </div>
  <div class="field">
    <table class="center">
      <thead>
      <tr>
          <th>Account</th>
          <th>Debit Amount</th>
          <th>Remove this row</th>
        </tr>
      </thead>
      <tbody id="transaction-entries-input">
        <%= f.fields_for :transaction_entries do |transaction_entry| %>
          <%= render "transaction_entry_fields", :f => transaction_entry %>
        <% end %>
        <tr>
          <td>
            <%= link_to_add_fields "Add Transaction Entry", f, :transaction_entries, {:tabindex => 9999, :id => "add-transaction-entry", :"container-tag" => "tr" } %>
          </td>
        </tr>
      </tbody>
    </table>
  </div>
  <div class="actions">
    <%= f.submit ( f.object.new_record? ? "Create" : "Update"), :tabindex => autotab %>
  </div>
<% end %>
<div id="hint-details">
</div>

<% content_for :javascripts do %>
<script type="text/javascript">

$(document).on('change', '.input-debit-amount', function(event){
  if($(this).val() != "") $(this).addClass("manual-input");
  else $(this).removeClass("manual-input");
  setRemainingAmount();
});
$(document).on('click', '.remove-transaction-entry', function(event){
  setRemainingAmount();
});
function setRemainingAmount(){
  $(".input-debit-amount:not(.manual-input)").each(function(index, e){
    $(e).val("");
  });

  var total = 0.0;
  $(".input-debit-amount.manual-input").filter(":visible").each(function(i,e){ total+=parseFloat($(e).val()); });
  if(total.toFixed(2) == "0.00") return ;
  if($(".input-debit-amount:not(.manual-input)").filter(":visible").length == 0){
    var add_transaction_entry_element = $('#add-transaction-entry');
    var scripts = add_transaction_entry_element.attr('onclick');
    scripts = scripts.replace(/add_fields\(this/, "add_fields($('#add-transaction-entry')");
    eval(scripts);
  }
  $(".input-debit-amount:not(.manual-input):visible:first").val(-total.toFixed(2));
}

  $('#new_transaction').validate({
    ignore: [],
    errorLabelContainer: "#form-validation-messages",
    wrapper: 'li',
    rules: {
      tranxaction_id: {
        required: true,
        minlength: 1
      },
      transaction_date: {
        required: true,
        dateISO: true,
        rangelength: [10,10]
      }
    },
    messages: {
      transaction_date: "Please enter a valid transaction date (YYYY-MM-DD)",
      tranxaction_id:   "Please select an existing transaction"
    }
  });

$(document).on('change', '#tranxaction_description', function(event){
  hideHintDetails();
  hideHint();
  var text = $(this).val();
  if (text.trim() == "") return;
  if (text.substr(0, 3) === "KMB") {
    previewFareKmb(text);
  } else if (text.substr(0, 3) === "MTR") {
    previewFareMtr(text);
  }
});

function toggleHintDetails() {
  $('#hint-details').toggle();
}
function hideHintDetails() {
  $('#hint-details').hide();
}
function showHint(hint) {
  $('#hint').text(hint);
  $('#hint-container').show();
}
function hideHint() {
  $('#hint-container').hide();
}

function previewFareMtr(text) {
  if (text.length < 4 || text.substr(3, 1) != ' ') return;
  var hyphen_pos = text.indexOf(" - ");
  if (hyphen_pos === -1) return;
  var end_pos = text.indexOf(" (", hyphen_pos);
  if (end_pos === -1) end_pos = text.length;
  var from = text.substr(4, hyphen_pos - 4);
  var to = text.substr(hyphen_pos + 3, end_pos - hyphen_pos - 3);

  $('#hint-details').load('/tranxactions/preview_fare_mtr', {
    'from': from,
    'to': to
  }, function(responseText) {
    if (responseText.trim() == '') {
      hideHint();
      hideHintDetails();
      return;
    }
    var octopus_fare = $('td:contains("Adult")').next().text();
    showHint("$" + octopus_fare);
  });
}

function previewFareKmb(text) {
  if (text.length < 4 || text.substr(3, 1) != ' ') return;
  var next_space_pos = text.indexOf(" ", 4);
  var route_no = text.substr(4);
  var from = "";
  var to = "";
  if (next_space_pos != -1) {
    route_no = text.substr(4, next_space_pos-4);
    var next_hyphen_pos = text.indexOf(" - ", next_space_pos);
    if (next_hyphen_pos != -1) {
      from = text.substr(next_space_pos + 1, next_hyphen_pos - next_space_pos - 1);
      to = text.substr(next_hyphen_pos + 3);
    }
  }
  $('#hint-details').load('/tranxactions/preview_fare_kmb', {
    'kmb_route_no': route_no
  }, function(responseText) {
    if (responseText.trim() == '') {
      hideHint();
      hideHintDetails();
      return;
    }
    showHint('');
    if (from != '' && to != '') {
      $('.detailTable').each(function(index) {
        var fromResult = $(this).find('td:contains("' + from.toUpperCase() + '")');
        if (fromResult.length == 0) return;
        var toResult = $(this).find('td:contains("' + to.toUpperCase() + '")');
        if (toResult.length == 0) return;
        var fromNode = $(fromResult[0]).closest('tr');
        var toNode = $(toResult[toResult.length-1]).closest('tr');
        if (fromNode.nextAll().filter(toNode).length !== 0) {
          fromNode.css('background-color', 'yellow');
          toNode.css('background-color', 'yellow');
          showHint(fromNode.find('td:nth-child(2)').text());
        }
      })
    }
  });
}
</script>
<% end %>
