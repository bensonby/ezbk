<%= form_for(@transaction) do |f| %>
  <% if @transaction.errors.any? %>
    <div id="error_explanation">
      <h2><%= pluralize(@transaction.errors.count, "error") %> prohibited this transaction from being saved:</h2>

      <ul>
      <% @transaction.errors.full_messages.each do |msg| %>
        <li><%= msg %></li>
      <% end %>
      </ul>
    </div>
  <% end %>



  <div id='transaction-meta-data'>
    <div class="field">
      <%= f.label :transaction_date %><br />
      <%= f.text_field :transaction_date, :tabindex => autotab, :class => 'date' %>
    </div>
    <div class="field">
      <%= f.label :description %><br />
      <%= f.text_field :description, :tabindex => autotab %>
    </div>
  </div>
  <table id='hint-container' style='display: none;'>
    <tr><td>Fare:</td><td id="hint-details-fare">N/A</td></tr>
    <tr><td>From:</td><td id="hint-details-from">N/A</td></tr>
    <tr><td>To:</td><td id="hint-details-to">N/A</td></tr>
  </table>

  <div class="field clear">
    <table class="center">
      <thead>
      <tr>
          <th>Account</th>
          <th>Debit Amount</th>
          <th>Remove this row</th>
        </tr>
      </thead>
      <tbody id="transaction-entries-input">
        <%= f.fields_for :transaction_entries do |transaction_entry| %>
          <%= render "transaction_entry_fields", :f => transaction_entry %>
        <% end %>
        <tr>
          <td>
            <%= link_to_add_fields "Add Transaction Entry", f, :transaction_entries, {:tabindex => 9999, :id => "add-transaction-entry", :"container-tag" => "tr" } %>
          </td>
        </tr>
      </tbody>
    </table>
  </div>
  <div class="actions">
    <%= f.submit ( f.object.new_record? ? "Create" : "Update"), :tabindex => autotab %>
  </div>
<% end %>
<div id="hint-details-panel" style="display: none;">
  <p style="display: none;">Route: <span id="loading-route">N/A</span></p>
  <div id="hint-details"></div>
</div>

<% content_for :javascripts do %>
<script type="text/javascript">

$(document).on('change', '.input-debit-amount', function(event){
  if($(this).val() != "") $(this).addClass("manual-input");
  else $(this).removeClass("manual-input");
  setRemainingAmount();
});
$(document).on('click', '.remove-transaction-entry', function(event){
  setRemainingAmount();
});
function setRemainingAmount(){
  $(".input-debit-amount:not(.manual-input)").each(function(index, e){
    $(e).val("");
  });

  var total = 0.0;
  $(".input-debit-amount.manual-input").filter(":visible").each(function(i,e){ total+=parseFloat($(e).val()); });
  if(total.toFixed(2) == "0.00") return ;
  if($(".input-debit-amount:not(.manual-input)").filter(":visible").length == 0){
    var add_transaction_entry_element = $('#add-transaction-entry');
    var scripts = add_transaction_entry_element.attr('onclick');
    scripts = scripts.replace(/add_fields\(this/, "add_fields($('#add-transaction-entry')");
    eval(scripts);
  }
  $(".input-debit-amount:not(.manual-input):visible:first").val(-total.toFixed(2));
}

  $('#new_transaction').validate({
    ignore: [],
    errorLabelContainer: "#form-validation-messages",
    wrapper: 'li',
    rules: {
      tranxaction_id: {
        required: true,
        minlength: 1
      },
      transaction_date: {
        required: true,
        dateISO: true,
        rangelength: [10,10]
      }
    },
    messages: {
      transaction_date: "Please enter a valid transaction date (YYYY-MM-DD)",
      tranxaction_id:   "Please select an existing transaction"
    }
  });

var autoCompleteTypes = ['KMB', 'LWB', 'CTB', 'NWFB', 'HBB', 'MTR'];
function parseBusDescription(text) {
  var result = {
    'type': null,
    'routeNo': null,
    'from': null,
    'to': null,
  };
  var busTypes = ['KMB', 'LWB', 'CTB', 'NWFB', 'HBB'];
  var spacePos = text.indexOf(' ');
  if (spacePos === -1) {
    return result;
  }
  var type = text.substr(0, spacePos);
  if (busTypes.indexOf(type) === -1) {
    return result;
  }
  result.type = type;

  var next_space_pos = text.indexOf(' ', spacePos + 1);
  if (next_space_pos === -1) {
    return result;
  }
  result.routeNo = text.substr(spacePos + 1, next_space_pos - spacePos - 1);

  var next_hyphen_pos = text.indexOf('-', next_space_pos);
  if (next_hyphen_pos !== -1) {
    result.from = text.substr(next_space_pos + 1, next_hyphen_pos - next_space_pos - 1).trim();
    result.to = text.substr(next_hyphen_pos + 1).trim();
  } else {
    result.from = text.substr(next_space_pos + 1).trim();
  }

  return result;
}

$(document).on('keyup', '#tranxaction_description', function bus(event) {
  var result = parseBusDescription($(this).val());
  if (!result.type || !result.routeNo) {
    return;
  }
  loading_route = $('#loading-route').text();
  if (result.routeNo != loading_route) {
    loadBusRouteDetails(result.type, result.routeNo);
  }
  previewFareBus($(this).val());
  if (autoCompleteTypes.indexOf(result.type) === -1) {
    hideHintPanel();
    hideHintDetailsPanel();
  }
});
$(document).on('change', '#tranxaction_description', function mtr(event) {
  var text = $(this).val();
  if (text.substr(0, 4) !== "MTR ") return;
  var next_hyphen_pos = text.indexOf("-");
  if (next_hyphen_pos === -1) return;
  var from = text.substr(4, next_hyphen_pos-4).trim();
  next_bracket_pos = text.indexOf("(");
  var to = text.substr(
    next_hyphen_pos+1,
    next_bracket_pos === -1 ? text.length - next_hyphen_pos - 1 : next_bracket_pos - next_hyphen_pos - 1
  ).trim();
  if (!from || !to) return;
  previewFareMtr(from, to);
});

function showHintDetailsPanel() {
  $('#hint-details-panel').show();
}
function hideHintDetailsPanel() {
  $('#hint-details-panel').hide();
}
function showHintPanel(hint) {
  $('#hint-container').show();
}
function hideHintPanel() {
  $('#hint-container').hide();
}

function previewFareMtr(from, to) {
  showHintPanel();
  setFrom(from);
  setTo(to);
  setFare("loading...");

  $('#hint-details').load('/tranxactions/preview_fare_mtr', {
    'from': from,
    'to': to
  }, function(responseText) {
    if (responseText.trim() == '') {
      setFare('Error');
      setFrom(from);
      setTo(to);
      hideHintDetailsPanel();
      return;
    }
    var octopus_fare = $('td:contains("Adult")').next().text();
    setFare("$" + octopus_fare);
    setFrom(from);
    setTo(to);
    showHintDetailsPanel();
  });
}

function loadBusRouteDetails(type, route_no) {
  $('#loading-route').text(route_no);
  $('#hint-details').text('');
  $('#hint-details').load('/tranxactions/preview_fare_bus', {
    'type': type,
    'route_no': route_no
  }, function(responseText) {
    if (responseText.trim() == '') {
      hideHintPanel();
      hideHintDetailsPanel();
      return;
    }
    showHintDetailsPanel();
    previewFareBus($('#tranxaction_description').val());
  });
}

function setFare(fare) {
  $('#hint-details-fare').text(fare);
}
function setFrom(from) {
  $('#hint-details-from').text(from);
}
function setTo(to) {
  $('#hint-details-to').text(to);
}

function showEmptyHint() {
  setFare('N/A');
  setFrom('N/A');
  setTo('N/A');
}

function previewFareBus(text) {
  showHintPanel();
  showEmptyHint();
  var result = parseBusDescription(text);
  if (!result.from && !result.to) {
    return;
  }

  $('.detailTable').find('td').css('background-color', 'transparent');

  $('.detailTable').each(function(index) {
    var fromResult = [];
    if (result.from) {
      fromResult = $(this).find('td:nth-child(3):contains("' + result.from + '")');
    }
    var toResult = [];
    if (result.to) {
      toResult = $(this).find('td:nth-child(3):contains("' + result.to + '")');
    }

    if (fromResult.length > 0) {
      setFrom($(fromResult[0]).text());
      fromResult.css('background-color', 'yellow');
    }
    if (toResult.length > 0) {
      setTo($(toResult[toResult.length - 1]).text());
      toResult.css('background-color', 'cyan');
    }

    if (fromResult.length > 0 && toResult.length > 0) {
      fromResult.filter(toResult).css('background-color', 'lime');
      var fromNode = $(fromResult[0]).closest('tr');
      var toNode = $(toResult[toResult.length-1]).closest('tr');
      if (fromNode.nextAll().filter(toNode).length !== 0) {
        var fare = fromNode.find('td:nth-child(4)').text();
        setFare(fare);
        setFrom($(fromResult[0]).text());
        setTo($(toResult[toResult.length - 1]).text());
        return false;
      }
    }
  })
}
</script>
<% end %>
